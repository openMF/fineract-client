/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.GetClientIdProductIdAccountingMappings
import org.openapitools.client.models.GetClientIdProductIdLockinPeriodFrequencyTypeOptions
import org.openapitools.client.models.GetClientIdProductIdMinimumActivePeriodFrequencyTypeOptions
import org.openapitools.client.models.GetShareAccountsChargeOptions
import org.openapitools.client.models.GetShareAccountsClientIdProductIdAccountingRule
import org.openapitools.client.models.GetShareAccountsClientIdProductIdLockPeriodTypeEnum
import org.openapitools.client.models.GetShareAccountsClientIdProductIdMinimumActivePeriodForDividendsTypeEnum
import org.openapitools.client.models.GetShareAccountsCurrency

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param accountingMappingOptions 
 * @param accountingMappings 
 * @param accountingRule 
 * @param allowDividendCalculationForInactiveClients 
 * @param chargeOptions 
 * @param charges 
 * @param currency 
 * @param currencyOptions 
 * @param description 
 * @param id 
 * @param lockinPeriod 
 * @param lockinPeriodEnum 
 * @param lockinPeriodFrequencyTypeOptions 
 * @param marketPrice 
 * @param maximumShares 
 * @param minimumActivePeriod 
 * @param minimumActivePeriodForDividendsTypeEnum 
 * @param minimumActivePeriodFrequencyTypeOptions 
 * @param minimumShares 
 * @param name 
 * @param norminalShares 
 * @param shareCapital 
 * @param shortName 
 * @param totalShares 
 * @param totalSharesIssued 
 * @param unitPrice 
 */


data class GetClientIdProductIdProductOptions (

    @Json(name = "accountingMappingOptions")
    val accountingMappingOptions: kotlin.Any? = null,

    @Json(name = "accountingMappings")
    val accountingMappings: GetClientIdProductIdAccountingMappings? = null,

    @Json(name = "accountingRule")
    val accountingRule: GetShareAccountsClientIdProductIdAccountingRule? = null,

    @Json(name = "allowDividendCalculationForInactiveClients")
    val allowDividendCalculationForInactiveClients: kotlin.Boolean? = null,

    @Json(name = "chargeOptions")
    val chargeOptions: GetShareAccountsChargeOptions? = null,

    @Json(name = "charges")
    val charges: kotlin.String? = null,

    @Json(name = "currency")
    val currency: GetShareAccountsCurrency? = null,

    @Json(name = "currencyOptions")
    val currencyOptions: GetShareAccountsCurrency? = null,

    @Json(name = "description")
    val description: kotlin.String? = null,

    @Json(name = "id")
    val id: kotlin.Int? = null,

    @Json(name = "lockinPeriod")
    val lockinPeriod: kotlin.Int? = null,

    @Json(name = "lockinPeriodEnum")
    val lockinPeriodEnum: GetShareAccountsClientIdProductIdLockPeriodTypeEnum? = null,

    @Json(name = "lockinPeriodFrequencyTypeOptions")
    val lockinPeriodFrequencyTypeOptions: GetClientIdProductIdLockinPeriodFrequencyTypeOptions? = null,

    @Json(name = "marketPrice")
    val marketPrice: kotlin.String? = null,

    @Json(name = "maximumShares")
    val maximumShares: kotlin.Int? = null,

    @Json(name = "minimumActivePeriod")
    val minimumActivePeriod: kotlin.Int? = null,

    @Json(name = "minimumActivePeriodForDividendsTypeEnum")
    val minimumActivePeriodForDividendsTypeEnum: GetShareAccountsClientIdProductIdMinimumActivePeriodForDividendsTypeEnum? = null,

    @Json(name = "minimumActivePeriodFrequencyTypeOptions")
    val minimumActivePeriodFrequencyTypeOptions: GetClientIdProductIdMinimumActivePeriodFrequencyTypeOptions? = null,

    @Json(name = "minimumShares")
    val minimumShares: kotlin.Int? = null,

    @Json(name = "name")
    val name: kotlin.String? = null,

    @Json(name = "norminalShares")
    val norminalShares: kotlin.Int? = null,

    @Json(name = "shareCapital")
    val shareCapital: kotlin.Int? = null,

    @Json(name = "shortName")
    val shortName: kotlin.String? = null,

    @Json(name = "totalShares")
    val totalShares: kotlin.Int? = null,

    @Json(name = "totalSharesIssued")
    val totalSharesIssued: kotlin.Int? = null,

    @Json(name = "unitPrice")
    val unitPrice: kotlin.Int? = null

) {


}

