/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.GetLoanChargeTemplateChargeAppliesTo
import org.openapitools.client.models.GetLoanCurrency
import org.openapitools.client.models.GetLoansLoanIdChargeCalculationType
import org.openapitools.client.models.GetLoansLoanIdChargePaymentMode
import org.openapitools.client.models.GetLoansLoanIdChargeTimeType
import org.openapitools.client.models.GetLoansLoanIdFeeFrequency

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param active 
 * @param amount 
 * @param chargeAppliesTo 
 * @param chargeCalculationType 
 * @param chargePaymentMode 
 * @param chargeTimeType 
 * @param currency 
 * @param feeFrequency 
 * @param feeInterval 
 * @param id 
 * @param name 
 * @param penalty 
 */


data class GetLoansLoanIdOverdueCharges (

    @Json(name = "active")
    val active: kotlin.Boolean? = null,

    @Json(name = "amount")
    val amount: kotlin.Float? = null,

    @Json(name = "chargeAppliesTo")
    val chargeAppliesTo: GetLoanChargeTemplateChargeAppliesTo? = null,

    @Json(name = "chargeCalculationType")
    val chargeCalculationType: GetLoansLoanIdChargeCalculationType? = null,

    @Json(name = "chargePaymentMode")
    val chargePaymentMode: GetLoansLoanIdChargePaymentMode? = null,

    @Json(name = "chargeTimeType")
    val chargeTimeType: GetLoansLoanIdChargeTimeType? = null,

    @Json(name = "currency")
    val currency: GetLoanCurrency? = null,

    @Json(name = "feeFrequency")
    val feeFrequency: GetLoansLoanIdFeeFrequency? = null,

    @Json(name = "feeInterval")
    val feeInterval: kotlin.Int? = null,

    @Json(name = "id")
    val id: kotlin.Int? = null,

    @Json(name = "name")
    val name: kotlin.String? = null,

    @Json(name = "penalty")
    val penalty: kotlin.Boolean? = null

) {


}

