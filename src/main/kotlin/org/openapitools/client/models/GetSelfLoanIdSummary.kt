/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.GetLoansLoanIdCurrency
import org.openapitools.client.models.GetLoansLoanIdDisbursementDetails
import org.openapitools.client.models.GetLoansLoanIdLinkedAccount
import org.openapitools.client.models.GetLoansLoanIdOverdueCharges

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param canDisburse 
 * @param currency 
 * @param disbursementDetails 
 * @param emiAmountVariations 
 * @param feeChargesCharged 
 * @param feeChargesDueAtDisbursementCharged 
 * @param feeChargesOutstanding 
 * @param feeChargesOverdue 
 * @param feeChargesPaid 
 * @param feeChargesWaived 
 * @param feeChargesWrittenOff 
 * @param fixedEmiAmount 
 * @param inArrears 
 * @param interestCharged 
 * @param interestOutstanding 
 * @param interestOverdue 
 * @param interestPaid 
 * @param interestWaived 
 * @param interestWrittenOff 
 * @param isNPA 
 * @param linkedAccount 
 * @param maxOutstandingLoanBalance 
 * @param overdueCharges 
 * @param overdueSinceDate 
 * @param penaltyChargesCharged 
 * @param penaltyChargesOutstanding 
 * @param penaltyChargesOverdue 
 * @param penaltyChargesPaid 
 * @param penaltyChargesWaived 
 * @param penaltyChargesWrittenOff 
 * @param principalAdjustments 
 * @param principalDisbursed 
 * @param principalOutstanding 
 * @param principalOverdue 
 * @param principalPaid 
 * @param principalWrittenOff 
 * @param totalChargeAdjustment 
 * @param totalChargeAdjustmentReversed 
 * @param totalChargeback 
 * @param totalCostOfLoan 
 * @param totalCreditBalanceRefund 
 * @param totalCreditBalanceRefundReversed 
 * @param totalExpectedCostOfLoan 
 * @param totalExpectedRepayment 
 * @param totalGoodwillCredit 
 * @param totalGoodwillCreditReversed 
 * @param totalMerchantRefund 
 * @param totalMerchantRefundReversed 
 * @param totalOutstanding 
 * @param totalOverdue 
 * @param totalPayoutRefund 
 * @param totalPayoutRefundReversed 
 * @param totalRepayment 
 * @param totalRepaymentTransaction 
 * @param totalRepaymentTransactionReversed 
 * @param totalWaived 
 * @param totalWrittenOff 
 */


data class GetSelfLoanIdSummary (

    @Json(name = "canDisburse")
    val canDisburse: kotlin.Boolean? = null,

    @Json(name = "currency")
    val currency: GetLoansLoanIdCurrency? = null,

    @Json(name = "disbursementDetails")
    val disbursementDetails: kotlin.collections.Set<GetLoansLoanIdDisbursementDetails>? = null,

    @Json(name = "emiAmountVariations")
    val emiAmountVariations: kotlin.collections.Set<kotlin.Any>? = null,

    @Json(name = "feeChargesCharged")
    val feeChargesCharged: kotlin.Double? = null,

    @Json(name = "feeChargesDueAtDisbursementCharged")
    val feeChargesDueAtDisbursementCharged: kotlin.Double? = null,

    @Json(name = "feeChargesOutstanding")
    val feeChargesOutstanding: kotlin.Double? = null,

    @Json(name = "feeChargesOverdue")
    val feeChargesOverdue: kotlin.Double? = null,

    @Json(name = "feeChargesPaid")
    val feeChargesPaid: kotlin.Double? = null,

    @Json(name = "feeChargesWaived")
    val feeChargesWaived: kotlin.Double? = null,

    @Json(name = "feeChargesWrittenOff")
    val feeChargesWrittenOff: kotlin.Double? = null,

    @Json(name = "fixedEmiAmount")
    val fixedEmiAmount: kotlin.Double? = null,

    @Json(name = "inArrears")
    val inArrears: kotlin.Boolean? = null,

    @Json(name = "interestCharged")
    val interestCharged: kotlin.Double? = null,

    @Json(name = "interestOutstanding")
    val interestOutstanding: kotlin.Double? = null,

    @Json(name = "interestOverdue")
    val interestOverdue: kotlin.Double? = null,

    @Json(name = "interestPaid")
    val interestPaid: kotlin.Double? = null,

    @Json(name = "interestWaived")
    val interestWaived: kotlin.Double? = null,

    @Json(name = "interestWrittenOff")
    val interestWrittenOff: kotlin.Double? = null,

    @Json(name = "isNPA")
    val isNPA: kotlin.Boolean? = null,

    @Json(name = "linkedAccount")
    val linkedAccount: GetLoansLoanIdLinkedAccount? = null,

    @Json(name = "maxOutstandingLoanBalance")
    val maxOutstandingLoanBalance: kotlin.Double? = null,

    @Json(name = "overdueCharges")
    val overdueCharges: kotlin.collections.Set<GetLoansLoanIdOverdueCharges>? = null,

    @Json(name = "overdueSinceDate")
    val overdueSinceDate: java.time.LocalDate? = null,

    @Json(name = "penaltyChargesCharged")
    val penaltyChargesCharged: kotlin.Double? = null,

    @Json(name = "penaltyChargesOutstanding")
    val penaltyChargesOutstanding: kotlin.Double? = null,

    @Json(name = "penaltyChargesOverdue")
    val penaltyChargesOverdue: kotlin.Double? = null,

    @Json(name = "penaltyChargesPaid")
    val penaltyChargesPaid: kotlin.Double? = null,

    @Json(name = "penaltyChargesWaived")
    val penaltyChargesWaived: kotlin.Double? = null,

    @Json(name = "penaltyChargesWrittenOff")
    val penaltyChargesWrittenOff: kotlin.Double? = null,

    @Json(name = "principalAdjustments")
    val principalAdjustments: kotlin.Double? = null,

    @Json(name = "principalDisbursed")
    val principalDisbursed: kotlin.Double? = null,

    @Json(name = "principalOutstanding")
    val principalOutstanding: kotlin.Double? = null,

    @Json(name = "principalOverdue")
    val principalOverdue: kotlin.Double? = null,

    @Json(name = "principalPaid")
    val principalPaid: kotlin.Double? = null,

    @Json(name = "principalWrittenOff")
    val principalWrittenOff: kotlin.Double? = null,

    @Json(name = "totalChargeAdjustment")
    val totalChargeAdjustment: kotlin.Double? = null,

    @Json(name = "totalChargeAdjustmentReversed")
    val totalChargeAdjustmentReversed: kotlin.Double? = null,

    @Json(name = "totalChargeback")
    val totalChargeback: kotlin.Double? = null,

    @Json(name = "totalCostOfLoan")
    val totalCostOfLoan: kotlin.Double? = null,

    @Json(name = "totalCreditBalanceRefund")
    val totalCreditBalanceRefund: kotlin.Double? = null,

    @Json(name = "totalCreditBalanceRefundReversed")
    val totalCreditBalanceRefundReversed: kotlin.Double? = null,

    @Json(name = "totalExpectedCostOfLoan")
    val totalExpectedCostOfLoan: kotlin.Double? = null,

    @Json(name = "totalExpectedRepayment")
    val totalExpectedRepayment: kotlin.Double? = null,

    @Json(name = "totalGoodwillCredit")
    val totalGoodwillCredit: kotlin.Double? = null,

    @Json(name = "totalGoodwillCreditReversed")
    val totalGoodwillCreditReversed: kotlin.Double? = null,

    @Json(name = "totalMerchantRefund")
    val totalMerchantRefund: kotlin.Double? = null,

    @Json(name = "totalMerchantRefundReversed")
    val totalMerchantRefundReversed: kotlin.Double? = null,

    @Json(name = "totalOutstanding")
    val totalOutstanding: kotlin.Double? = null,

    @Json(name = "totalOverdue")
    val totalOverdue: kotlin.Double? = null,

    @Json(name = "totalPayoutRefund")
    val totalPayoutRefund: kotlin.Double? = null,

    @Json(name = "totalPayoutRefundReversed")
    val totalPayoutRefundReversed: kotlin.Double? = null,

    @Json(name = "totalRepayment")
    val totalRepayment: kotlin.Double? = null,

    @Json(name = "totalRepaymentTransaction")
    val totalRepaymentTransaction: kotlin.Double? = null,

    @Json(name = "totalRepaymentTransactionReversed")
    val totalRepaymentTransactionReversed: kotlin.Double? = null,

    @Json(name = "totalWaived")
    val totalWaived: kotlin.Double? = null,

    @Json(name = "totalWrittenOff")
    val totalWrittenOff: kotlin.Double? = null

) {


}

