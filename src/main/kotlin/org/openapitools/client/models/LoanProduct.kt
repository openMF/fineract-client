/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass
import java.time.LocalDate

/**
 *
 *
 * @param accountingDisabled
 * @param accountingType
 * @param accrualBasedAccountingEnabled
 * @param allowApprovedDisbursedAmountsOverApplied
 * @param arrearsBasedOnOriginalSchedule
 * @param cashBasedAccountingEnabled
 * @param closeDate
 * @param currency
 * @param delinquencyBucket
 * @param disallowExpectedDisbursements
 * @param dueDaysForRepaymentEvent
 * @param enableInstallmentLevelDelinquency
 * @param equalAmortization
 * @param externalId
 * @param fixedPrincipalPercentagePerInstallment
 * @param floatingRates
 * @param holdGuaranteeFundsEnabled
 * @param id
 * @param includeInBorrowerCycle
 * @param installmentAmountInMultiplesOf
 * @param interestPeriodFrequencyType
 * @param interestRecalculationEnabled
 * @param linkedToFloatingInterestRate
 * @param loanProductCharges
 * @param loanProductConfigurableAttributes
 * @param loanProductGuaranteeDetails
 * @param loanProductRelatedDetail
 * @param loanProductTrancheDetails
 * @param maxNominalInterestRatePerPeriod
 * @param maxNumberOfRepayments
 * @param maxPrincipalAmount
 * @param minNominalInterestRatePerPeriod
 * @param minNumberOfRepayments
 * @param minPrincipalAmount
 * @param minimumDaysBetweenDisbursalAndFirstRepayment
 * @param multiDisburseLoan
 * @param new
 * @param nominalInterestRatePerPeriod
 * @param numberOfRepayments
 * @param overAppliedCalculationType
 * @param overAppliedNumber
 * @param overDueDaysForRepaymentEvent
 * @param paymentAllocationRules
 * @param periodicAccrualAccountingEnabled
 * @param principalAmount
 * @param principalThresholdForLastInstallment
 * @param productInterestRecalculationDetails
 * @param rates
 * @param repaymentStartDateType
 * @param repaymentStrategy
 * @param shortName
 * @param startDate
 * @param syncExpectedWithDisbursementDate
 * @param transactionProcessingStrategyCode
 * @param transactionProcessingStrategyName
 * @param upfrontAccrualAccountingEnabled
 */


data class LoanProduct(

    @Json(name = "accountingDisabled")
    val accountingDisabled: kotlin.Boolean? = null,

    @Json(name = "accountingType")
    val accountingType: kotlin.Int? = null,

    @Json(name = "accrualBasedAccountingEnabled")
    val accrualBasedAccountingEnabled: kotlin.Boolean? = null,

    @Json(name = "allowApprovedDisbursedAmountsOverApplied")
    val allowApprovedDisbursedAmountsOverApplied: kotlin.Boolean? = null,

    @Json(name = "arrearsBasedOnOriginalSchedule")
    val arrearsBasedOnOriginalSchedule: kotlin.Boolean? = null,

    @Json(name = "cashBasedAccountingEnabled")
    val cashBasedAccountingEnabled: kotlin.Boolean? = null,

    @Json(name = "closeDate")
    val closeDate: LocalDate? = null,

    @Json(name = "currency")
    val currency: MonetaryCurrency? = null,

    @Json(name = "delinquencyBucket")
    val delinquencyBucket: DelinquencyBucket? = null,

    @Json(name = "disallowExpectedDisbursements")
    val disallowExpectedDisbursements: kotlin.Boolean? = null,

    @Json(name = "dueDaysForRepaymentEvent")
    val dueDaysForRepaymentEvent: kotlin.Int? = null,

    @Json(name = "enableInstallmentLevelDelinquency")
    val enableInstallmentLevelDelinquency: kotlin.Boolean? = null,

    @Json(name = "equalAmortization")
    val equalAmortization: kotlin.Boolean? = null,

    @Json(name = "externalId")
    val externalId: ExternalId? = null,

    @Json(name = "fixedPrincipalPercentagePerInstallment")
    val fixedPrincipalPercentagePerInstallment: java.math.BigDecimal? = null,

    @Json(name = "floatingRates")
    val floatingRates: LoanProductFloatingRates? = null,

    @Json(name = "holdGuaranteeFundsEnabled")
    val holdGuaranteeFundsEnabled: kotlin.Boolean? = null,

    @Json(name = "id")
    val id: kotlin.Long? = null,

    @Json(name = "includeInBorrowerCycle")
    val includeInBorrowerCycle: kotlin.Boolean? = null,

    @Json(name = "installmentAmountInMultiplesOf")
    val installmentAmountInMultiplesOf: kotlin.Int? = null,

    @Json(name = "interestPeriodFrequencyType")
    val interestPeriodFrequencyType: LoanProduct.InterestPeriodFrequencyType? = null,

    @Json(name = "interestRecalculationEnabled")
    val interestRecalculationEnabled: kotlin.Boolean? = null,

    @Json(name = "linkedToFloatingInterestRate")
    val linkedToFloatingInterestRate: kotlin.Boolean? = null,

    @Json(name = "loanProductCharges")
    val loanProductCharges: kotlin.collections.List<Charge>? = null,

    @Json(name = "loanProductConfigurableAttributes")
    val loanProductConfigurableAttributes: LoanProductConfigurableAttributes? = null,

    @Json(name = "loanProductGuaranteeDetails")
    val loanProductGuaranteeDetails: LoanProductGuaranteeDetails? = null,

    @Json(name = "loanProductRelatedDetail")
    val loanProductRelatedDetail: LoanProductRelatedDetail? = null,

    @Json(name = "loanProductTrancheDetails")
    val loanProductTrancheDetails: LoanProductTrancheDetails? = null,

    @Json(name = "maxNominalInterestRatePerPeriod")
    val maxNominalInterestRatePerPeriod: java.math.BigDecimal? = null,

    @Json(name = "maxNumberOfRepayments")
    val maxNumberOfRepayments: kotlin.Int? = null,

    @Json(name = "maxPrincipalAmount")
    val maxPrincipalAmount: Money? = null,

    @Json(name = "minNominalInterestRatePerPeriod")
    val minNominalInterestRatePerPeriod: java.math.BigDecimal? = null,

    @Json(name = "minNumberOfRepayments")
    val minNumberOfRepayments: kotlin.Int? = null,

    @Json(name = "minPrincipalAmount")
    val minPrincipalAmount: Money? = null,

    @Json(name = "minimumDaysBetweenDisbursalAndFirstRepayment")
    val minimumDaysBetweenDisbursalAndFirstRepayment: kotlin.Int? = null,

    @Json(name = "multiDisburseLoan")
    val multiDisburseLoan: kotlin.Boolean? = null,

    @Json(name = "new")
    val new: kotlin.Boolean? = null,

    @Json(name = "nominalInterestRatePerPeriod")
    val nominalInterestRatePerPeriod: java.math.BigDecimal? = null,

    @Json(name = "numberOfRepayments")
    val numberOfRepayments: kotlin.Int? = null,

    @Json(name = "overAppliedCalculationType")
    val overAppliedCalculationType: kotlin.String? = null,

    @Json(name = "overAppliedNumber")
    val overAppliedNumber: kotlin.Int? = null,

    @Json(name = "overDueDaysForRepaymentEvent")
    val overDueDaysForRepaymentEvent: kotlin.Int? = null,

    @Json(name = "paymentAllocationRules")
    val paymentAllocationRules: kotlin.collections.List<LoanProductPaymentAllocationRule>? = null,

    @Json(name = "periodicAccrualAccountingEnabled")
    val periodicAccrualAccountingEnabled: kotlin.Boolean? = null,

    @Json(name = "principalAmount")
    val principalAmount: Money? = null,

    @Json(name = "principalThresholdForLastInstallment")
    val principalThresholdForLastInstallment: java.math.BigDecimal? = null,

    @Json(name = "productInterestRecalculationDetails")
    val productInterestRecalculationDetails: LoanProductInterestRecalculationDetails? = null,

    @Json(name = "rates")
    val rates: kotlin.collections.List<Rate>? = null,

    @Json(name = "repaymentStartDateType")
    val repaymentStartDateType: LoanProduct.RepaymentStartDateType? = null,

    @Json(name = "repaymentStrategy")
    val repaymentStrategy: kotlin.String? = null,

    @Json(name = "shortName")
    val shortName: kotlin.String? = null,

    @Json(name = "startDate")
    val startDate: LocalDate? = null,

    @Json(name = "syncExpectedWithDisbursementDate")
    val syncExpectedWithDisbursementDate: kotlin.Boolean? = null,

    @Json(name = "transactionProcessingStrategyCode")
    val transactionProcessingStrategyCode: kotlin.String? = null,

    @Json(name = "transactionProcessingStrategyName")
    val transactionProcessingStrategyName: kotlin.String? = null,

    @Json(name = "upfrontAccrualAccountingEnabled")
    val upfrontAccrualAccountingEnabled: kotlin.Boolean? = null

) {

    /**
     *
     *
     * Values: DAYS,WEEKS,MONTHS,YEARS,WHOLE_TERM,INVALID
     */
    @JsonClass(generateAdapter = false)
    enum class InterestPeriodFrequencyType(val value: kotlin.String) {
        @Json(name = "DAYS")
        DAYS("DAYS"),

        @Json(name = "WEEKS")
        WEEKS("WEEKS"),

        @Json(name = "MONTHS")
        MONTHS("MONTHS"),

        @Json(name = "YEARS")
        YEARS("YEARS"),

        @Json(name = "WHOLE_TERM")
        WHOLE_TERM("WHOLE_TERM"),

        @Json(name = "INVALID")
        INVALID("INVALID");
    }

    /**
     *
     *
     * Values: INVALID,DISBURSEMENT_DATE,SUBMITTED_ON_DATE
     */
    @JsonClass(generateAdapter = false)
    enum class RepaymentStartDateType(val value: kotlin.String) {
        @Json(name = "INVALID")
        INVALID("INVALID"),

        @Json(name = "DISBURSEMENT_DATE")
        DISBURSEMENT_DATE("DISBURSEMENT_DATE"),

        @Json(name = "SUBMITTED_ON_DATE")
        SUBMITTED_ON_DATE("SUBMITTED_ON_DATE");
    }

}

