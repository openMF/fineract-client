/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.AdvancedPaymentData
import org.openapitools.client.models.AllowAttributeOverrides
import org.openapitools.client.models.ChargeData
import org.openapitools.client.models.ChargeToGLAccountMapper
import org.openapitools.client.models.GetLoanFeeToIncomeAccountMappings
import org.openapitools.client.models.GetLoanPaymentChannelToFundSourceMappings
import org.openapitools.client.models.RateData

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * PutLoanProductsProductIdRequest
 *
 * @param accountMovesOutOfNPAOnlyOnArrearsCompletion 
 * @param accountingRule 
 * @param allowApprovedDisbursedAmountsOverApplied 
 * @param allowAttributeOverrides 
 * @param allowPartialPeriodInterestCalcualtion 
 * @param allowVariableInstallments 
 * @param amortizationType 
 * @param canDefineInstallmentAmount 
 * @param canUseForTopup 
 * @param chargeOffExpenseAccountId 
 * @param chargeOffFraudExpenseAccountId 
 * @param charges 
 * @param closeDate 
 * @param currencyCode 
 * @param dateFormat 
 * @param daysInMonthType 
 * @param daysInYearType 
 * @param delinquencyBucketId 
 * @param description 
 * @param digitsAfterDecimal 
 * @param disableScheduleExtensionForDownPayment 
 * @param disallowExpectedDisbursements 
 * @param disbursedAmountPercentageForDownPayment 
 * @param dueDaysForRepaymentEvent 
 * @param enableAutoRepaymentForDownPayment 
 * @param enableDownPayment 
 * @param enableInstallmentLevelDelinquency 
 * @param feeToIncomeAccountMappings 
 * @param fixedPrincipalPercentagePerInstallment 
 * @param fundId 
 * @param fundSourceAccountId 
 * @param goodwillCreditAccountId 
 * @param graceOnArrearsAgeing 
 * @param graceOnInterestPayment 
 * @param graceOnPrincipalPayment 
 * @param holdGuaranteeFunds 
 * @param inArrearsTolerance 
 * @param inMultiplesOf 
 * @param includeInBorrowerCycle 
 * @param incomeFromChargeOffFeesAccountId 
 * @param incomeFromChargeOffInterestAccountId 
 * @param incomeFromChargeOffPenaltyAccountId 
 * @param incomeFromFeeAccountId 
 * @param incomeFromGoodwillCreditFeesAccountId 
 * @param incomeFromGoodwillCreditInterestAccountId 
 * @param incomeFromGoodwillCreditPenaltyAccountId 
 * @param incomeFromPenaltyAccountId 
 * @param incomeFromRecoveryAccountId 
 * @param installmentAmountInMultiplesOf 
 * @param interestCalculationPeriodType 
 * @param interestOnLoanAccountId 
 * @param interestRateFrequencyType 
 * @param interestRatePerPeriod 
 * @param interestRateVariationsForBorrowerCycle 
 * @param interestRecalculationCompoundingMethod 
 * @param interestType 
 * @param isEqualAmortization 
 * @param isInterestRecalculationEnabled 
 * @param isLinkedToFloatingInterestRates 
 * @param loanPortfolioAccountId 
 * @param locale 
 * @param maxInterestRatePerPeriod 
 * @param maxNumberOfRepayments 
 * @param maxPrincipal 
 * @param maxTrancheCount 
 * @param minInterestRatePerPeriod 
 * @param minNumberOfRepayments 
 * @param minPrincipal 
 * @param minimumDaysBetweenDisbursalAndFirstRepayment 
 * @param multiDisburseLoan 
 * @param name 
 * @param numberOfRepaymentVariationsForBorrowerCycle 
 * @param numberOfRepayments 
 * @param outstandingLoanBalance 
 * @param overAppliedCalculationType 
 * @param overAppliedNumber 
 * @param overDueDaysForRepaymentEvent 
 * @param overdueDaysForNPA 
 * @param overpaymentLiabilityAccountId 
 * @param paymentAllocation 
 * @param paymentChannelToFundSourceMappings 
 * @param penaltyToIncomeAccountMappings 
 * @param preClosureInterestCalculationStrategy 
 * @param principal 
 * @param principalThresholdForLastInstallment 
 * @param principalVariationsForBorrowerCycle 
 * @param rates 
 * @param recalculationCompoundingFrequencyInterval 
 * @param recalculationCompoundingFrequencyOnDayType 
 * @param recalculationCompoundingFrequencyType 
 * @param recalculationRestFrequencyInterval 
 * @param recalculationRestFrequencyType 
 * @param receivableFeeAccountId 
 * @param receivableInterestAccountId 
 * @param receivablePenaltyAccountId 
 * @param repaymentEvery 
 * @param repaymentFrequencyType 
 * @param repaymentStartDateType 
 * @param rescheduleStrategyMethod 
 * @param shortName 
 * @param startDate 
 * @param transactionProcessingStrategyCode 
 * @param transfersInSuspenseAccountId 
 * @param useBorrowerCycle 
 * @param writeOffAccountId 
 */


data class PutLoanProductsProductIdRequest (

    @Json(name = "accountMovesOutOfNPAOnlyOnArrearsCompletion")
    val accountMovesOutOfNPAOnlyOnArrearsCompletion: kotlin.Boolean? = null,

    @Json(name = "accountingRule")
    val accountingRule: kotlin.Int? = null,

    @Json(name = "allowApprovedDisbursedAmountsOverApplied")
    val allowApprovedDisbursedAmountsOverApplied: kotlin.Boolean? = null,

    @Json(name = "allowAttributeOverrides")
    val allowAttributeOverrides: AllowAttributeOverrides? = null,

    @Json(name = "allowPartialPeriodInterestCalcualtion")
    val allowPartialPeriodInterestCalcualtion: kotlin.Boolean? = null,

    @Json(name = "allowVariableInstallments")
    val allowVariableInstallments: kotlin.Boolean? = null,

    @Json(name = "amortizationType")
    val amortizationType: kotlin.Int? = null,

    @Json(name = "canDefineInstallmentAmount")
    val canDefineInstallmentAmount: kotlin.Boolean? = null,

    @Json(name = "canUseForTopup")
    val canUseForTopup: kotlin.Boolean? = null,

    @Json(name = "chargeOffExpenseAccountId")
    val chargeOffExpenseAccountId: kotlin.Long? = null,

    @Json(name = "chargeOffFraudExpenseAccountId")
    val chargeOffFraudExpenseAccountId: kotlin.Long? = null,

    @Json(name = "charges")
    val charges: kotlin.collections.List<ChargeData>? = null,

    @Json(name = "closeDate")
    val closeDate: kotlin.String? = null,

    @Json(name = "currencyCode")
    val currencyCode: kotlin.String? = null,

    @Json(name = "dateFormat")
    val dateFormat: kotlin.String? = null,

    @Json(name = "daysInMonthType")
    val daysInMonthType: kotlin.Long? = null,

    @Json(name = "daysInYearType")
    val daysInYearType: kotlin.Long? = null,

    @Json(name = "delinquencyBucketId")
    val delinquencyBucketId: kotlin.Long? = null,

    @Json(name = "description")
    val description: kotlin.String? = null,

    @Json(name = "digitsAfterDecimal")
    val digitsAfterDecimal: kotlin.Int? = null,

    @Json(name = "disableScheduleExtensionForDownPayment")
    val disableScheduleExtensionForDownPayment: kotlin.Boolean? = null,

    @Json(name = "disallowExpectedDisbursements")
    val disallowExpectedDisbursements: kotlin.Boolean? = null,

    @Json(name = "disbursedAmountPercentageForDownPayment")
    val disbursedAmountPercentageForDownPayment: java.math.BigDecimal? = null,

    @Json(name = "dueDaysForRepaymentEvent")
    val dueDaysForRepaymentEvent: kotlin.Int? = null,

    @Json(name = "enableAutoRepaymentForDownPayment")
    val enableAutoRepaymentForDownPayment: kotlin.Boolean? = null,

    @Json(name = "enableDownPayment")
    val enableDownPayment: kotlin.Boolean? = null,

    @Json(name = "enableInstallmentLevelDelinquency")
    val enableInstallmentLevelDelinquency: kotlin.Boolean? = null,

    @Json(name = "feeToIncomeAccountMappings")
    val feeToIncomeAccountMappings: kotlin.collections.List<GetLoanFeeToIncomeAccountMappings>? = null,

    @Json(name = "fixedPrincipalPercentagePerInstallment")
    val fixedPrincipalPercentagePerInstallment: java.math.BigDecimal? = null,

    @Json(name = "fundId")
    val fundId: kotlin.Long? = null,

    @Json(name = "fundSourceAccountId")
    val fundSourceAccountId: kotlin.Long? = null,

    @Json(name = "goodwillCreditAccountId")
    val goodwillCreditAccountId: kotlin.Long? = null,

    @Json(name = "graceOnArrearsAgeing")
    val graceOnArrearsAgeing: kotlin.Int? = null,

    @Json(name = "graceOnInterestPayment")
    val graceOnInterestPayment: kotlin.Int? = null,

    @Json(name = "graceOnPrincipalPayment")
    val graceOnPrincipalPayment: kotlin.Int? = null,

    @Json(name = "holdGuaranteeFunds")
    val holdGuaranteeFunds: kotlin.Boolean? = null,

    @Json(name = "inArrearsTolerance")
    val inArrearsTolerance: kotlin.Int? = null,

    @Json(name = "inMultiplesOf")
    val inMultiplesOf: kotlin.Int? = null,

    @Json(name = "includeInBorrowerCycle")
    val includeInBorrowerCycle: kotlin.Boolean? = null,

    @Json(name = "incomeFromChargeOffFeesAccountId")
    val incomeFromChargeOffFeesAccountId: kotlin.Long? = null,

    @Json(name = "incomeFromChargeOffInterestAccountId")
    val incomeFromChargeOffInterestAccountId: kotlin.Long? = null,

    @Json(name = "incomeFromChargeOffPenaltyAccountId")
    val incomeFromChargeOffPenaltyAccountId: kotlin.Long? = null,

    @Json(name = "incomeFromFeeAccountId")
    val incomeFromFeeAccountId: kotlin.Long? = null,

    @Json(name = "incomeFromGoodwillCreditFeesAccountId")
    val incomeFromGoodwillCreditFeesAccountId: kotlin.Long? = null,

    @Json(name = "incomeFromGoodwillCreditInterestAccountId")
    val incomeFromGoodwillCreditInterestAccountId: kotlin.Long? = null,

    @Json(name = "incomeFromGoodwillCreditPenaltyAccountId")
    val incomeFromGoodwillCreditPenaltyAccountId: kotlin.Long? = null,

    @Json(name = "incomeFromPenaltyAccountId")
    val incomeFromPenaltyAccountId: kotlin.Long? = null,

    @Json(name = "incomeFromRecoveryAccountId")
    val incomeFromRecoveryAccountId: kotlin.Long? = null,

    @Json(name = "installmentAmountInMultiplesOf")
    val installmentAmountInMultiplesOf: kotlin.Int? = null,

    @Json(name = "interestCalculationPeriodType")
    val interestCalculationPeriodType: kotlin.Int? = null,

    @Json(name = "interestOnLoanAccountId")
    val interestOnLoanAccountId: kotlin.Long? = null,

    @Json(name = "interestRateFrequencyType")
    val interestRateFrequencyType: kotlin.Int? = null,

    @Json(name = "interestRatePerPeriod")
    val interestRatePerPeriod: kotlin.Double? = null,

    @Json(name = "interestRateVariationsForBorrowerCycle")
    val interestRateVariationsForBorrowerCycle: kotlin.collections.List<kotlin.Int>? = null,

    @Json(name = "interestRecalculationCompoundingMethod")
    val interestRecalculationCompoundingMethod: kotlin.Int? = null,

    @Json(name = "interestType")
    val interestType: kotlin.Int? = null,

    @Json(name = "isEqualAmortization")
    val isEqualAmortization: kotlin.Boolean? = null,

    @Json(name = "isInterestRecalculationEnabled")
    val isInterestRecalculationEnabled: kotlin.Boolean? = null,

    @Json(name = "isLinkedToFloatingInterestRates")
    val isLinkedToFloatingInterestRates: kotlin.Boolean? = null,

    @Json(name = "loanPortfolioAccountId")
    val loanPortfolioAccountId: kotlin.Long? = null,

    @Json(name = "locale")
    val locale: kotlin.String? = null,

    @Json(name = "maxInterestRatePerPeriod")
    val maxInterestRatePerPeriod: kotlin.Double? = null,

    @Json(name = "maxNumberOfRepayments")
    val maxNumberOfRepayments: kotlin.Int? = null,

    @Json(name = "maxPrincipal")
    val maxPrincipal: kotlin.Double? = null,

    @Json(name = "maxTrancheCount")
    val maxTrancheCount: kotlin.Int? = null,

    @Json(name = "minInterestRatePerPeriod")
    val minInterestRatePerPeriod: kotlin.Double? = null,

    @Json(name = "minNumberOfRepayments")
    val minNumberOfRepayments: kotlin.Int? = null,

    @Json(name = "minPrincipal")
    val minPrincipal: kotlin.Double? = null,

    @Json(name = "minimumDaysBetweenDisbursalAndFirstRepayment")
    val minimumDaysBetweenDisbursalAndFirstRepayment: kotlin.Int? = null,

    @Json(name = "multiDisburseLoan")
    val multiDisburseLoan: kotlin.Boolean? = null,

    @Json(name = "name")
    val name: kotlin.String? = null,

    @Json(name = "numberOfRepaymentVariationsForBorrowerCycle")
    val numberOfRepaymentVariationsForBorrowerCycle: kotlin.collections.List<kotlin.Int>? = null,

    @Json(name = "numberOfRepayments")
    val numberOfRepayments: kotlin.Int? = null,

    @Json(name = "outstandingLoanBalance")
    val outstandingLoanBalance: kotlin.Double? = null,

    @Json(name = "overAppliedCalculationType")
    val overAppliedCalculationType: kotlin.String? = null,

    @Json(name = "overAppliedNumber")
    val overAppliedNumber: kotlin.Int? = null,

    @Json(name = "overDueDaysForRepaymentEvent")
    val overDueDaysForRepaymentEvent: kotlin.Int? = null,

    @Json(name = "overdueDaysForNPA")
    val overdueDaysForNPA: kotlin.Int? = null,

    @Json(name = "overpaymentLiabilityAccountId")
    val overpaymentLiabilityAccountId: kotlin.Long? = null,

    @Json(name = "paymentAllocation")
    val paymentAllocation: kotlin.collections.List<AdvancedPaymentData>? = null,

    @Json(name = "paymentChannelToFundSourceMappings")
    val paymentChannelToFundSourceMappings: kotlin.collections.List<GetLoanPaymentChannelToFundSourceMappings>? = null,

    @Json(name = "penaltyToIncomeAccountMappings")
    val penaltyToIncomeAccountMappings: kotlin.collections.List<ChargeToGLAccountMapper>? = null,

    @Json(name = "preClosureInterestCalculationStrategy")
    val preClosureInterestCalculationStrategy: kotlin.Int? = null,

    @Json(name = "principal")
    val principal: kotlin.Double? = null,

    @Json(name = "principalThresholdForLastInstallment")
    val principalThresholdForLastInstallment: kotlin.Int? = null,

    @Json(name = "principalVariationsForBorrowerCycle")
    val principalVariationsForBorrowerCycle: kotlin.collections.List<kotlin.Int>? = null,

    @Json(name = "rates")
    val rates: kotlin.collections.List<RateData>? = null,

    @Json(name = "recalculationCompoundingFrequencyInterval")
    val recalculationCompoundingFrequencyInterval: kotlin.Int? = null,

    @Json(name = "recalculationCompoundingFrequencyOnDayType")
    val recalculationCompoundingFrequencyOnDayType: kotlin.Int? = null,

    @Json(name = "recalculationCompoundingFrequencyType")
    val recalculationCompoundingFrequencyType: kotlin.Int? = null,

    @Json(name = "recalculationRestFrequencyInterval")
    val recalculationRestFrequencyInterval: kotlin.Int? = null,

    @Json(name = "recalculationRestFrequencyType")
    val recalculationRestFrequencyType: kotlin.Int? = null,

    @Json(name = "receivableFeeAccountId")
    val receivableFeeAccountId: kotlin.Long? = null,

    @Json(name = "receivableInterestAccountId")
    val receivableInterestAccountId: kotlin.Long? = null,

    @Json(name = "receivablePenaltyAccountId")
    val receivablePenaltyAccountId: kotlin.Long? = null,

    @Json(name = "repaymentEvery")
    val repaymentEvery: kotlin.Int? = null,

    @Json(name = "repaymentFrequencyType")
    val repaymentFrequencyType: kotlin.Int? = null,

    @Json(name = "repaymentStartDateType")
    val repaymentStartDateType: kotlin.Int? = null,

    @Json(name = "rescheduleStrategyMethod")
    val rescheduleStrategyMethod: kotlin.Int? = null,

    @Json(name = "shortName")
    val shortName: kotlin.String? = null,

    @Json(name = "startDate")
    val startDate: kotlin.String? = null,

    @Json(name = "transactionProcessingStrategyCode")
    val transactionProcessingStrategyCode: kotlin.String? = null,

    @Json(name = "transfersInSuspenseAccountId")
    val transfersInSuspenseAccountId: kotlin.Long? = null,

    @Json(name = "useBorrowerCycle")
    val useBorrowerCycle: kotlin.Boolean? = null,

    @Json(name = "writeOffAccountId")
    val writeOffAccountId: kotlin.Long? = null

) {


}

