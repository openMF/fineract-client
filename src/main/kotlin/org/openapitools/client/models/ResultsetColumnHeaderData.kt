/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param booleanDisplayType 
 * @param codeLookupDisplayType 
 * @param codeValueDisplayType 
 * @param columnCode 
 * @param columnDisplayType 
 * @param columnLength 
 * @param columnName 
 * @param columnType 
 * @param columnValues 
 * @param dateDisplayType 
 * @param dateTimeDisplayType 
 * @param decimalDisplayType 
 * @param integerDisplayType 
 * @param isColumnIndexed 
 * @param isColumnNullable 
 * @param isColumnPrimaryKey 
 * @param isColumnUnique 
 * @param mandatory 
 * @param stringDisplayType 
 * @param textDisplayType 
 * @param timeDisplayType 
 */


data class ResultsetColumnHeaderData (

    @Json(name = "booleanDisplayType")
    val booleanDisplayType: kotlin.Boolean? = null,

    @Json(name = "codeLookupDisplayType")
    val codeLookupDisplayType: kotlin.Boolean? = null,

    @Json(name = "codeValueDisplayType")
    val codeValueDisplayType: kotlin.Boolean? = null,

    @Json(name = "columnCode")
    val columnCode: kotlin.String? = null,

    @Json(name = "columnDisplayType")
    val columnDisplayType: ResultsetColumnHeaderData.ColumnDisplayType? = null,

    @Json(name = "columnLength")
    val columnLength: kotlin.Long? = null,

    @Json(name = "columnName")
    val columnName: kotlin.String? = null,

    @Json(name = "columnType")
    val columnType: ResultsetColumnHeaderData.ColumnType? = null,

    @Json(name = "columnValues")
    val columnValues: kotlin.collections.List<kotlin.Any>? = null,

    @Json(name = "dateDisplayType")
    val dateDisplayType: kotlin.Boolean? = null,

    @Json(name = "dateTimeDisplayType")
    val dateTimeDisplayType: kotlin.Boolean? = null,

    @Json(name = "decimalDisplayType")
    val decimalDisplayType: kotlin.Boolean? = null,

    @Json(name = "integerDisplayType")
    val integerDisplayType: kotlin.Boolean? = null,

    @Json(name = "isColumnIndexed")
    val isColumnIndexed: kotlin.Boolean? = null,

    @Json(name = "isColumnNullable")
    val isColumnNullable: kotlin.Boolean? = null,

    @Json(name = "isColumnPrimaryKey")
    val isColumnPrimaryKey: kotlin.Boolean? = null,

    @Json(name = "isColumnUnique")
    val isColumnUnique: kotlin.Boolean? = null,

    @Json(name = "mandatory")
    val mandatory: kotlin.Boolean? = null,

    @Json(name = "stringDisplayType")
    val stringDisplayType: kotlin.Boolean? = null,

    @Json(name = "textDisplayType")
    val textDisplayType: kotlin.Boolean? = null,

    @Json(name = "timeDisplayType")
    val timeDisplayType: kotlin.Boolean? = null

) {

    /**
     * 
     *
     * Values: TEXT,STRING,INTEGER,FLOAT,DECIMAL,DATE,TIME,DATETIME,BOOLEAN,BINARY,CODELOOKUP,CODEVALUE
     */
    @JsonClass(generateAdapter = false)
    enum class ColumnDisplayType(val value: kotlin.String) {
        @Json(name = "TEXT") TEXT("TEXT"),
        @Json(name = "STRING") STRING("STRING"),
        @Json(name = "INTEGER") INTEGER("INTEGER"),
        @Json(name = "FLOAT") FLOAT("FLOAT"),
        @Json(name = "DECIMAL") DECIMAL("DECIMAL"),
        @Json(name = "DATE") DATE("DATE"),
        @Json(name = "TIME") TIME("TIME"),
        @Json(name = "DATETIME") DATETIME("DATETIME"),
        @Json(name = "BOOLEAN") BOOLEAN("BOOLEAN"),
        @Json(name = "BINARY") BINARY("BINARY"),
        @Json(name = "CODELOOKUP") CODELOOKUP("CODELOOKUP"),
        @Json(name = "CODEVALUE") CODEVALUE("CODEVALUE");
    }
    /**
     * 
     *
     * Values: BIT,BOOLEAN,SMALLINT,TINYINT,INTEGER,MEDIUMINT,BIGINT,REAL,FLOAT,DOUBLE,NUMERIC,DECIMAL,SERIAL,SMALLSERIAL,BIGSERIAL,MONEY,CHAR,VARCHAR,LONGVARCHAR,TEXT,TINYTEXT,MEDIUMTEXT,LONGTEXT,JSON,DATE,TIME,TIME_WITH_TIMEZONE,TIMESTAMP,DATETIME,TIMESTAMP_WITH_TIMEZONE,INTERVAL,BINARY,VARBINARY,LONGVARBINARY,BYTEA,BLOB,TINYBLOB,MEDIUMBLOB,LONGBLOB
     */
    @JsonClass(generateAdapter = false)
    enum class ColumnType(val value: kotlin.String) {
        @Json(name = "BIT") BIT("BIT"),
        @Json(name = "BOOLEAN") BOOLEAN("BOOLEAN"),
        @Json(name = "SMALLINT") SMALLINT("SMALLINT"),
        @Json(name = "TINYINT") TINYINT("TINYINT"),
        @Json(name = "INTEGER") INTEGER("INTEGER"),
        @Json(name = "MEDIUMINT") MEDIUMINT("MEDIUMINT"),
        @Json(name = "BIGINT") BIGINT("BIGINT"),
        @Json(name = "REAL") REAL("REAL"),
        @Json(name = "FLOAT") FLOAT("FLOAT"),
        @Json(name = "DOUBLE") DOUBLE("DOUBLE"),
        @Json(name = "NUMERIC") NUMERIC("NUMERIC"),
        @Json(name = "DECIMAL") DECIMAL("DECIMAL"),
        @Json(name = "SERIAL") SERIAL("SERIAL"),
        @Json(name = "SMALLSERIAL") SMALLSERIAL("SMALLSERIAL"),
        @Json(name = "BIGSERIAL") BIGSERIAL("BIGSERIAL"),
        @Json(name = "MONEY") MONEY("MONEY"),
        @Json(name = "CHAR") CHAR("CHAR"),
        @Json(name = "VARCHAR") VARCHAR("VARCHAR"),
        @Json(name = "LONGVARCHAR") LONGVARCHAR("LONGVARCHAR"),
        @Json(name = "TEXT") TEXT("TEXT"),
        @Json(name = "TINYTEXT") TINYTEXT("TINYTEXT"),
        @Json(name = "MEDIUMTEXT") MEDIUMTEXT("MEDIUMTEXT"),
        @Json(name = "LONGTEXT") LONGTEXT("LONGTEXT"),
        @Json(name = "JSON") JSON("JSON"),
        @Json(name = "DATE") DATE("DATE"),
        @Json(name = "TIME") TIME("TIME"),
        @Json(name = "TIME_WITH_TIMEZONE") TIME_WITH_TIMEZONE("TIME_WITH_TIMEZONE"),
        @Json(name = "TIMESTAMP") TIMESTAMP("TIMESTAMP"),
        @Json(name = "DATETIME") DATETIME("DATETIME"),
        @Json(name = "TIMESTAMP_WITH_TIMEZONE") TIMESTAMP_WITH_TIMEZONE("TIMESTAMP_WITH_TIMEZONE"),
        @Json(name = "INTERVAL") INTERVAL("INTERVAL"),
        @Json(name = "BINARY") BINARY("BINARY"),
        @Json(name = "VARBINARY") VARBINARY("VARBINARY"),
        @Json(name = "LONGVARBINARY") LONGVARBINARY("LONGVARBINARY"),
        @Json(name = "BYTEA") BYTEA("BYTEA"),
        @Json(name = "BLOB") BLOB("BLOB"),
        @Json(name = "TINYBLOB") TINYBLOB("TINYBLOB"),
        @Json(name = "MEDIUMBLOB") MEDIUMBLOB("MEDIUMBLOB"),
        @Json(name = "LONGBLOB") LONGBLOB("LONGBLOB");
    }

}

