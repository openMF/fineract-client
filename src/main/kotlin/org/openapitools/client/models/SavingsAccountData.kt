/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.ChargeData
import org.openapitools.client.models.ClientData
import org.openapitools.client.models.CurrencyData
import org.openapitools.client.models.DatatableData
import org.openapitools.client.models.EnumOptionData
import org.openapitools.client.models.GroupGeneralData
import org.openapitools.client.models.SavingsAccountApplicationTimelineData
import org.openapitools.client.models.SavingsAccountChargeData
import org.openapitools.client.models.SavingsAccountStatusEnumData
import org.openapitools.client.models.SavingsAccountSubStatusEnumData
import org.openapitools.client.models.SavingsAccountSummaryData
import org.openapitools.client.models.SavingsAccountTransactionData
import org.openapitools.client.models.SavingsProductData
import org.openapitools.client.models.StaffData
import org.openapitools.client.models.TaxGroupData

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param accountNo 
 * @param accrualBasedAccountingEnabledOnSavingsProduct 
 * @param activatedOnDate 
 * @param activationLocalDate 
 * @param allowOverdraft 
 * @param annualFee 
 * @param cashBasedAccountingEnabledOnSavingsProduct 
 * @param chargeOptions 
 * @param charges 
 * @param clientData 
 * @param clientId 
 * @param clientName 
 * @param currency 
 * @param datatables 
 * @param dateFormat 
 * @param daysToDormancy 
 * @param daysToEscheat 
 * @param daysToInactive 
 * @param depositType 
 * @param depositTypeId 
 * @param enforceMinRequiredBalance 
 * @param existingReversedTransactionIds 
 * @param existingTransactionIds 
 * @param externalId 
 * @param fieldOfficerId 
 * @param fieldOfficerName 
 * @param fieldOfficerOptions 
 * @param glAccountIdForInterestOnSavings 
 * @param glAccountIdForSavingsControl 
 * @param groupGeneralData 
 * @param groupId 
 * @param groupName 
 * @param id 
 * @param interestCalculationDaysInYearType 
 * @param interestCalculationDaysInYearTypeId 
 * @param interestCalculationDaysInYearTypeOptions 
 * @param interestCalculationType 
 * @param interestCalculationTypeId 
 * @param interestCalculationTypeOptions 
 * @param interestCompoundingPeriodType 
 * @param interestCompoundingPeriodTypeId 
 * @param interestCompoundingPeriodTypeOptions 
 * @param interestPostingPeriodType 
 * @param interestPostingPeriodTypeId 
 * @param interestPostingPeriodTypeOptions 
 * @param isDormancyTrackingActive 
 * @param lastActiveTransactionDate 
 * @param lastSavingsAccountTransaction 
 * @param lienAllowed 
 * @param locale 
 * @param lockedInUntilDate 
 * @param lockinPeriodFrequency 
 * @param lockinPeriodFrequencyType 
 * @param lockinPeriodFrequencyTypeId 
 * @param lockinPeriodFrequencyTypeOptions 
 * @param maxAllowedLienLimit 
 * @param minBalanceForInterestCalculation 
 * @param minOverdraftForInterestCalculation 
 * @param minRequiredBalance 
 * @param minRequiredOpeningBalance 
 * @param newSavingsAccountTransactionData 
 * @param nominalAnnualInterestRate 
 * @param nominalAnnualInterestRateOverdraft 
 * @param officeId 
 * @param onHoldFunds 
 * @param overdraftLimit 
 * @param productId 
 * @param productOptions 
 * @param reasonForBlock 
 * @param rowIndex 
 * @param savingsAccountSummaryData 
 * @param savingsAccountTransactionData 
 * @param savingsAccountTransactionSummaryWrapper 
 * @param savingsAccountTransactionsWithPivotConfig 
 * @param savingsAmountOnHold 
 * @param savingsHelper 
 * @param savingsProduct 
 * @param savingsProductData 
 * @param savingsProductId 
 * @param savingsProductName 
 * @param startInterestCalculationDate 
 * @param status 
 * @param subStatus 
 * @param submittedOnDate 
 * @param summary 
 * @param taxGroup 
 * @param timeline 
 * @param transactions 
 * @param updatedTransactions 
 * @param withHoldTax 
 * @param withdrawalFee 
 * @param withdrawalFeeForTransfers 
 * @param withdrawalFeeTypeOptions 
 */


data class SavingsAccountData (

    @Json(name = "accountNo")
    val accountNo: kotlin.String? = null,

    @Json(name = "accrualBasedAccountingEnabledOnSavingsProduct")
    val accrualBasedAccountingEnabledOnSavingsProduct: kotlin.Boolean? = null,

    @Json(name = "activatedOnDate")
    val activatedOnDate: java.time.LocalDate? = null,

    @Json(name = "activationLocalDate")
    val activationLocalDate: java.time.LocalDate? = null,

    @Json(name = "allowOverdraft")
    val allowOverdraft: kotlin.Boolean? = null,

    @Json(name = "annualFee")
    val annualFee: SavingsAccountChargeData? = null,

    @Json(name = "cashBasedAccountingEnabledOnSavingsProduct")
    val cashBasedAccountingEnabledOnSavingsProduct: kotlin.Boolean? = null,

    @Json(name = "chargeOptions")
    val chargeOptions: kotlin.collections.List<ChargeData>? = null,

    @Json(name = "charges")
    val charges: kotlin.collections.List<SavingsAccountChargeData>? = null,

    @Json(name = "clientData")
    val clientData: ClientData? = null,

    @Json(name = "clientId")
    val clientId: kotlin.Long? = null,

    @Json(name = "clientName")
    val clientName: kotlin.String? = null,

    @Json(name = "currency")
    val currency: CurrencyData? = null,

    @Json(name = "datatables")
    val datatables: kotlin.collections.List<DatatableData>? = null,

    @Json(name = "dateFormat")
    val dateFormat: kotlin.String? = null,

    @Json(name = "daysToDormancy")
    val daysToDormancy: kotlin.Int? = null,

    @Json(name = "daysToEscheat")
    val daysToEscheat: kotlin.Int? = null,

    @Json(name = "daysToInactive")
    val daysToInactive: kotlin.Int? = null,

    @Json(name = "depositType")
    val depositType: EnumOptionData? = null,

    @Json(name = "depositTypeId")
    val depositTypeId: kotlin.Int? = null,

    @Json(name = "enforceMinRequiredBalance")
    val enforceMinRequiredBalance: kotlin.Boolean? = null,

    @Json(name = "existingReversedTransactionIds")
    val existingReversedTransactionIds: kotlin.collections.Set<kotlin.Long>? = null,

    @Json(name = "existingTransactionIds")
    val existingTransactionIds: kotlin.collections.Set<kotlin.Long>? = null,

    @Json(name = "externalId")
    val externalId: kotlin.String? = null,

    @Json(name = "fieldOfficerId")
    val fieldOfficerId: kotlin.Long? = null,

    @Json(name = "fieldOfficerName")
    val fieldOfficerName: kotlin.String? = null,

    @Json(name = "fieldOfficerOptions")
    val fieldOfficerOptions: kotlin.collections.List<StaffData>? = null,

    @Json(name = "glAccountIdForInterestOnSavings")
    val glAccountIdForInterestOnSavings: kotlin.Long? = null,

    @Json(name = "glAccountIdForSavingsControl")
    val glAccountIdForSavingsControl: kotlin.Long? = null,

    @Json(name = "groupGeneralData")
    val groupGeneralData: GroupGeneralData? = null,

    @Json(name = "groupId")
    val groupId: kotlin.Long? = null,

    @Json(name = "groupName")
    val groupName: kotlin.String? = null,

    @Json(name = "id")
    val id: kotlin.Long? = null,

    @Json(name = "interestCalculationDaysInYearType")
    val interestCalculationDaysInYearType: EnumOptionData? = null,

    @Json(name = "interestCalculationDaysInYearTypeId")
    val interestCalculationDaysInYearTypeId: kotlin.Int? = null,

    @Json(name = "interestCalculationDaysInYearTypeOptions")
    val interestCalculationDaysInYearTypeOptions: kotlin.collections.List<EnumOptionData>? = null,

    @Json(name = "interestCalculationType")
    val interestCalculationType: EnumOptionData? = null,

    @Json(name = "interestCalculationTypeId")
    val interestCalculationTypeId: kotlin.Int? = null,

    @Json(name = "interestCalculationTypeOptions")
    val interestCalculationTypeOptions: kotlin.collections.List<EnumOptionData>? = null,

    @Json(name = "interestCompoundingPeriodType")
    val interestCompoundingPeriodType: EnumOptionData? = null,

    @Json(name = "interestCompoundingPeriodTypeId")
    val interestCompoundingPeriodTypeId: kotlin.Int? = null,

    @Json(name = "interestCompoundingPeriodTypeOptions")
    val interestCompoundingPeriodTypeOptions: kotlin.collections.List<EnumOptionData>? = null,

    @Json(name = "interestPostingPeriodType")
    val interestPostingPeriodType: EnumOptionData? = null,

    @Json(name = "interestPostingPeriodTypeId")
    val interestPostingPeriodTypeId: kotlin.Int? = null,

    @Json(name = "interestPostingPeriodTypeOptions")
    val interestPostingPeriodTypeOptions: kotlin.collections.List<EnumOptionData>? = null,

    @Json(name = "isDormancyTrackingActive")
    val isDormancyTrackingActive: kotlin.Boolean? = null,

    @Json(name = "lastActiveTransactionDate")
    val lastActiveTransactionDate: java.time.LocalDate? = null,

    @Json(name = "lastSavingsAccountTransaction")
    val lastSavingsAccountTransaction: SavingsAccountTransactionData? = null,

    @Json(name = "lienAllowed")
    val lienAllowed: kotlin.Boolean? = null,

    @Json(name = "locale")
    val locale: kotlin.String? = null,

    @Json(name = "lockedInUntilDate")
    val lockedInUntilDate: java.time.LocalDate? = null,

    @Json(name = "lockinPeriodFrequency")
    val lockinPeriodFrequency: kotlin.Int? = null,

    @Json(name = "lockinPeriodFrequencyType")
    val lockinPeriodFrequencyType: EnumOptionData? = null,

    @Json(name = "lockinPeriodFrequencyTypeId")
    val lockinPeriodFrequencyTypeId: kotlin.Int? = null,

    @Json(name = "lockinPeriodFrequencyTypeOptions")
    val lockinPeriodFrequencyTypeOptions: kotlin.collections.List<EnumOptionData>? = null,

    @Json(name = "maxAllowedLienLimit")
    val maxAllowedLienLimit: java.math.BigDecimal? = null,

    @Json(name = "minBalanceForInterestCalculation")
    val minBalanceForInterestCalculation: java.math.BigDecimal? = null,

    @Json(name = "minOverdraftForInterestCalculation")
    val minOverdraftForInterestCalculation: java.math.BigDecimal? = null,

    @Json(name = "minRequiredBalance")
    val minRequiredBalance: java.math.BigDecimal? = null,

    @Json(name = "minRequiredOpeningBalance")
    val minRequiredOpeningBalance: java.math.BigDecimal? = null,

    @Json(name = "newSavingsAccountTransactionData")
    val newSavingsAccountTransactionData: kotlin.collections.List<SavingsAccountTransactionData>? = null,

    @Json(name = "nominalAnnualInterestRate")
    val nominalAnnualInterestRate: java.math.BigDecimal? = null,

    @Json(name = "nominalAnnualInterestRateOverdraft")
    val nominalAnnualInterestRateOverdraft: java.math.BigDecimal? = null,

    @Json(name = "officeId")
    val officeId: kotlin.Long? = null,

    @Json(name = "onHoldFunds")
    val onHoldFunds: java.math.BigDecimal? = null,

    @Json(name = "overdraftLimit")
    val overdraftLimit: java.math.BigDecimal? = null,

    @Json(name = "productId")
    val productId: kotlin.Long? = null,

    @Json(name = "productOptions")
    val productOptions: kotlin.collections.List<SavingsProductData>? = null,

    @Json(name = "reasonForBlock")
    val reasonForBlock: kotlin.String? = null,

    @Json(name = "rowIndex")
    val rowIndex: kotlin.Int? = null,

    @Json(name = "savingsAccountSummaryData")
    val savingsAccountSummaryData: SavingsAccountSummaryData? = null,

    @Json(name = "savingsAccountTransactionData")
    val savingsAccountTransactionData: kotlin.collections.List<SavingsAccountTransactionData>? = null,

    @Json(name = "savingsAccountTransactionSummaryWrapper")
    val savingsAccountTransactionSummaryWrapper: kotlin.Any? = null,

    @Json(name = "savingsAccountTransactionsWithPivotConfig")
    val savingsAccountTransactionsWithPivotConfig: kotlin.collections.List<SavingsAccountTransactionData>? = null,

    @Json(name = "savingsAmountOnHold")
    val savingsAmountOnHold: java.math.BigDecimal? = null,

    @Json(name = "savingsHelper")
    val savingsHelper: kotlin.Any? = null,

    @Json(name = "savingsProduct")
    val savingsProduct: SavingsProductData? = null,

    @Json(name = "savingsProductData")
    val savingsProductData: SavingsProductData? = null,

    @Json(name = "savingsProductId")
    val savingsProductId: kotlin.Long? = null,

    @Json(name = "savingsProductName")
    val savingsProductName: kotlin.String? = null,

    @Json(name = "startInterestCalculationDate")
    val startInterestCalculationDate: java.time.LocalDate? = null,

    @Json(name = "status")
    val status: SavingsAccountStatusEnumData? = null,

    @Json(name = "subStatus")
    val subStatus: SavingsAccountSubStatusEnumData? = null,

    @Json(name = "submittedOnDate")
    val submittedOnDate: java.time.LocalDate? = null,

    @Json(name = "summary")
    val summary: SavingsAccountSummaryData? = null,

    @Json(name = "taxGroup")
    val taxGroup: TaxGroupData? = null,

    @Json(name = "timeline")
    val timeline: SavingsAccountApplicationTimelineData? = null,

    @Json(name = "transactions")
    val transactions: kotlin.collections.List<SavingsAccountTransactionData>? = null,

    @Json(name = "updatedTransactions")
    val updatedTransactions: kotlin.collections.List<SavingsAccountTransactionData>? = null,

    @Json(name = "withHoldTax")
    val withHoldTax: kotlin.Boolean? = null,

    @Json(name = "withdrawalFee")
    val withdrawalFee: SavingsAccountChargeData? = null,

    @Json(name = "withdrawalFeeForTransfers")
    val withdrawalFeeForTransfers: kotlin.Boolean? = null,

    @Json(name = "withdrawalFeeTypeOptions")
    val withdrawalFeeTypeOptions: kotlin.collections.List<EnumOptionData>? = null

) {


}

