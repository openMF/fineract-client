/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.AccountTransferData
import org.openapitools.client.models.CurrencyData
import org.openapitools.client.models.PaymentDetailData
import org.openapitools.client.models.PaymentTypeData
import org.openapitools.client.models.SavingsAccountChargesPaidByData
import org.openapitools.client.models.SavingsAccountTransactionEnumData
import org.openapitools.client.models.TaxDetailsData

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param accountId 
 * @param accountNo 
 * @param accountNumber 
 * @param amount 
 * @param amountOnHold 
 * @param amountRelease 
 * @param annualFee 
 * @param annualFeeAndNotReversed 
 * @param balanceEndDate 
 * @param balanceNumberOfDays 
 * @param bankNumber 
 * @param chargeTransaction 
 * @param chargeTransactionAndNotReversed 
 * @param chargesPaidByData 
 * @param checkNumber 
 * @param credit 
 * @param cumulativeBalance 
 * @param currency 
 * @param date 
 * @param dateFormat 
 * @param debit 
 * @param deposit 
 * @param depositAndNotReversed 
 * @param dividendPayoutAndNotReversed 
 * @param endOfBalanceLocalDate 
 * @param entryType 
 * @param feeCharge 
 * @param feeChargeAndNotReversed 
 * @param id 
 * @param interestPosting 
 * @param interestPostingAndNotReversed 
 * @param interestedPostedAsOn 
 * @param isManualTransaction 
 * @param isReversal 
 * @param lienTransaction 
 * @param locale 
 * @param manualTransaction 
 * @param modifiedId 
 * @param notReversed 
 * @param note 
 * @param originalTransactionId 
 * @param outstandingChargeAmount 
 * @param overdraftAmount 
 * @param overdraftInterestAndNotReversed 
 * @param payCharge 
 * @param paymentDetailData 
 * @param paymentTypeId 
 * @param paymentTypeOptions 
 * @param penaltyCharge 
 * @param penaltyChargeAndNotReversed 
 * @param reasonForBlock 
 * @param receiptNumber 
 * @param refNo 
 * @param releaseTransactionId 
 * @param reversalTransaction 
 * @param reversed 
 * @param routingCode 
 * @param rowIndex 
 * @param runningBalance 
 * @param savingsAccountChargesPaid 
 * @param savingsAccountId 
 * @param submittedByUsername 
 * @param submittedOnDate 
 * @param taxDetails 
 * @param transactionAmount 
 * @param transactionDate 
 * @param transactionType 
 * @param transfer 
 * @param waiveCharge 
 * @param waiveFeeCharge 
 * @param waiveFeeChargeAndNotReversed 
 * @param waivePenaltyCharge 
 * @param waivePenaltyChargeAndNotReversed 
 * @param withHoldTaxAndNotReversed 
 * @param withdrawal 
 * @param withdrawalFeeAndNotReversed 
 */


data class SavingsAccountTransactionData (

    @Json(name = "accountId")
    val accountId: kotlin.Long? = null,

    @Json(name = "accountNo")
    val accountNo: kotlin.String? = null,

    @Json(name = "accountNumber")
    val accountNumber: kotlin.String? = null,

    @Json(name = "amount")
    val amount: java.math.BigDecimal? = null,

    @Json(name = "amountOnHold")
    val amountOnHold: kotlin.Boolean? = null,

    @Json(name = "amountRelease")
    val amountRelease: kotlin.Boolean? = null,

    @Json(name = "annualFee")
    val annualFee: kotlin.Boolean? = null,

    @Json(name = "annualFeeAndNotReversed")
    val annualFeeAndNotReversed: kotlin.Boolean? = null,

    @Json(name = "balanceEndDate")
    val balanceEndDate: java.time.LocalDate? = null,

    @Json(name = "balanceNumberOfDays")
    val balanceNumberOfDays: kotlin.Int? = null,

    @Json(name = "bankNumber")
    val bankNumber: kotlin.String? = null,

    @Json(name = "chargeTransaction")
    val chargeTransaction: kotlin.Boolean? = null,

    @Json(name = "chargeTransactionAndNotReversed")
    val chargeTransactionAndNotReversed: kotlin.Boolean? = null,

    @Json(name = "chargesPaidByData")
    val chargesPaidByData: kotlin.collections.Set<SavingsAccountChargesPaidByData>? = null,

    @Json(name = "checkNumber")
    val checkNumber: kotlin.String? = null,

    @Json(name = "credit")
    val credit: kotlin.Boolean? = null,

    @Json(name = "cumulativeBalance")
    val cumulativeBalance: java.math.BigDecimal? = null,

    @Json(name = "currency")
    val currency: CurrencyData? = null,

    @Json(name = "date")
    val date: java.time.LocalDate? = null,

    @Json(name = "dateFormat")
    val dateFormat: kotlin.String? = null,

    @Json(name = "debit")
    val debit: kotlin.Boolean? = null,

    @Json(name = "deposit")
    val deposit: kotlin.Boolean? = null,

    @Json(name = "depositAndNotReversed")
    val depositAndNotReversed: kotlin.Boolean? = null,

    @Json(name = "dividendPayoutAndNotReversed")
    val dividendPayoutAndNotReversed: kotlin.Boolean? = null,

    @Json(name = "endOfBalanceLocalDate")
    val endOfBalanceLocalDate: java.time.LocalDate? = null,

    @Json(name = "entryType")
    val entryType: SavingsAccountTransactionData.EntryType? = null,

    @Json(name = "feeCharge")
    val feeCharge: kotlin.Boolean? = null,

    @Json(name = "feeChargeAndNotReversed")
    val feeChargeAndNotReversed: kotlin.Boolean? = null,

    @Json(name = "id")
    val id: kotlin.Long? = null,

    @Json(name = "interestPosting")
    val interestPosting: kotlin.Boolean? = null,

    @Json(name = "interestPostingAndNotReversed")
    val interestPostingAndNotReversed: kotlin.Boolean? = null,

    @Json(name = "interestedPostedAsOn")
    val interestedPostedAsOn: kotlin.Boolean? = null,

    @Json(name = "isManualTransaction")
    val isManualTransaction: kotlin.Boolean? = null,

    @Json(name = "isReversal")
    val isReversal: kotlin.Boolean? = null,

    @Json(name = "lienTransaction")
    val lienTransaction: kotlin.Boolean? = null,

    @Json(name = "locale")
    val locale: kotlin.String? = null,

    @Json(name = "manualTransaction")
    val manualTransaction: kotlin.Boolean? = null,

    @Json(name = "modifiedId")
    val modifiedId: kotlin.Long? = null,

    @Json(name = "notReversed")
    val notReversed: kotlin.Boolean? = null,

    @Json(name = "note")
    val note: kotlin.String? = null,

    @Json(name = "originalTransactionId")
    val originalTransactionId: kotlin.Long? = null,

    @Json(name = "outstandingChargeAmount")
    val outstandingChargeAmount: java.math.BigDecimal? = null,

    @Json(name = "overdraftAmount")
    val overdraftAmount: java.math.BigDecimal? = null,

    @Json(name = "overdraftInterestAndNotReversed")
    val overdraftInterestAndNotReversed: kotlin.Boolean? = null,

    @Json(name = "payCharge")
    val payCharge: kotlin.Boolean? = null,

    @Json(name = "paymentDetailData")
    val paymentDetailData: PaymentDetailData? = null,

    @Json(name = "paymentTypeId")
    val paymentTypeId: kotlin.Long? = null,

    @Json(name = "paymentTypeOptions")
    val paymentTypeOptions: kotlin.collections.List<PaymentTypeData>? = null,

    @Json(name = "penaltyCharge")
    val penaltyCharge: kotlin.Boolean? = null,

    @Json(name = "penaltyChargeAndNotReversed")
    val penaltyChargeAndNotReversed: kotlin.Boolean? = null,

    @Json(name = "reasonForBlock")
    val reasonForBlock: kotlin.String? = null,

    @Json(name = "receiptNumber")
    val receiptNumber: kotlin.String? = null,

    @Json(name = "refNo")
    val refNo: kotlin.String? = null,

    @Json(name = "releaseTransactionId")
    val releaseTransactionId: kotlin.Long? = null,

    @Json(name = "reversalTransaction")
    val reversalTransaction: kotlin.Boolean? = null,

    @Json(name = "reversed")
    val reversed: kotlin.Boolean? = null,

    @Json(name = "routingCode")
    val routingCode: kotlin.String? = null,

    @Json(name = "rowIndex")
    val rowIndex: kotlin.Int? = null,

    @Json(name = "runningBalance")
    val runningBalance: java.math.BigDecimal? = null,

    @Json(name = "savingsAccountChargesPaid")
    val savingsAccountChargesPaid: kotlin.collections.Set<SavingsAccountChargesPaidByData>? = null,

    @Json(name = "savingsAccountId")
    val savingsAccountId: kotlin.Long? = null,

    @Json(name = "submittedByUsername")
    val submittedByUsername: kotlin.String? = null,

    @Json(name = "submittedOnDate")
    val submittedOnDate: java.time.LocalDate? = null,

    @Json(name = "taxDetails")
    val taxDetails: kotlin.collections.List<TaxDetailsData>? = null,

    @Json(name = "transactionAmount")
    val transactionAmount: java.math.BigDecimal? = null,

    @Json(name = "transactionDate")
    val transactionDate: java.time.LocalDate? = null,

    @Json(name = "transactionType")
    val transactionType: SavingsAccountTransactionEnumData? = null,

    @Json(name = "transfer")
    val transfer: AccountTransferData? = null,

    @Json(name = "waiveCharge")
    val waiveCharge: kotlin.Boolean? = null,

    @Json(name = "waiveFeeCharge")
    val waiveFeeCharge: kotlin.Boolean? = null,

    @Json(name = "waiveFeeChargeAndNotReversed")
    val waiveFeeChargeAndNotReversed: kotlin.Boolean? = null,

    @Json(name = "waivePenaltyCharge")
    val waivePenaltyCharge: kotlin.Boolean? = null,

    @Json(name = "waivePenaltyChargeAndNotReversed")
    val waivePenaltyChargeAndNotReversed: kotlin.Boolean? = null,

    @Json(name = "withHoldTaxAndNotReversed")
    val withHoldTaxAndNotReversed: kotlin.Boolean? = null,

    @Json(name = "withdrawal")
    val withdrawal: kotlin.Boolean? = null,

    @Json(name = "withdrawalFeeAndNotReversed")
    val withdrawalFeeAndNotReversed: kotlin.Boolean? = null

) {

    /**
     * 
     *
     * Values: CREDIT,DEBIT
     */
    @JsonClass(generateAdapter = false)
    enum class EntryType(val value: kotlin.String) {
        @Json(name = "CREDIT") CREDIT("CREDIT"),
        @Json(name = "DEBIT") DEBIT("DEBIT");
    }

}

