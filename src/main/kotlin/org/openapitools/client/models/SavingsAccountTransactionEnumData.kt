/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param amountHold 
 * @param amountRelease 
 * @param annualFee 
 * @param approveTransfer 
 * @param chargeTransaction 
 * @param code 
 * @param credit 
 * @param debit 
 * @param deposit 
 * @param depositOrWithdrawal 
 * @param dividendPayout 
 * @param entryType 
 * @param escheat 
 * @param feeDeduction 
 * @param id 
 * @param incomeFromInterest 
 * @param initiateTransfer 
 * @param interestPosting 
 * @param overDraftInterestPosting 
 * @param overdraftFee 
 * @param overdraftInterest 
 * @param payCharge 
 * @param rejectTransfer 
 * @param transactionTypeEnum 
 * @param `value` 
 * @param withdrawTransfer 
 * @param withdrawal 
 * @param withdrawalFee 
 * @param withholdTax 
 * @param writtenoff 
 */


data class SavingsAccountTransactionEnumData (

    @Json(name = "amountHold")
    val amountHold: kotlin.Boolean? = null,

    @Json(name = "amountRelease")
    val amountRelease: kotlin.Boolean? = null,

    @Json(name = "annualFee")
    val annualFee: kotlin.Boolean? = null,

    @Json(name = "approveTransfer")
    val approveTransfer: kotlin.Boolean? = null,

    @Json(name = "chargeTransaction")
    val chargeTransaction: kotlin.Boolean? = null,

    @Json(name = "code")
    val code: kotlin.String? = null,

    @Json(name = "credit")
    val credit: kotlin.Boolean? = null,

    @Json(name = "debit")
    val debit: kotlin.Boolean? = null,

    @Json(name = "deposit")
    val deposit: kotlin.Boolean? = null,

    @Json(name = "depositOrWithdrawal")
    val depositOrWithdrawal: kotlin.Boolean? = null,

    @Json(name = "dividendPayout")
    val dividendPayout: kotlin.Boolean? = null,

    @Json(name = "entryType")
    val entryType: SavingsAccountTransactionEnumData.EntryType? = null,

    @Json(name = "escheat")
    val escheat: kotlin.Boolean? = null,

    @Json(name = "feeDeduction")
    val feeDeduction: kotlin.Boolean? = null,

    @Json(name = "id")
    val id: kotlin.Long? = null,

    @Json(name = "incomeFromInterest")
    val incomeFromInterest: kotlin.Boolean? = null,

    @Json(name = "initiateTransfer")
    val initiateTransfer: kotlin.Boolean? = null,

    @Json(name = "interestPosting")
    val interestPosting: kotlin.Boolean? = null,

    @Json(name = "overDraftInterestPosting")
    val overDraftInterestPosting: kotlin.Boolean? = null,

    @Json(name = "overdraftFee")
    val overdraftFee: kotlin.Boolean? = null,

    @Json(name = "overdraftInterest")
    val overdraftInterest: kotlin.Boolean? = null,

    @Json(name = "payCharge")
    val payCharge: kotlin.Boolean? = null,

    @Json(name = "rejectTransfer")
    val rejectTransfer: kotlin.Boolean? = null,

    @Json(name = "transactionTypeEnum")
    val transactionTypeEnum: SavingsAccountTransactionEnumData.TransactionTypeEnum? = null,

    @Json(name = "value")
    val `value`: kotlin.String? = null,

    @Json(name = "withdrawTransfer")
    val withdrawTransfer: kotlin.Boolean? = null,

    @Json(name = "withdrawal")
    val withdrawal: kotlin.Boolean? = null,

    @Json(name = "withdrawalFee")
    val withdrawalFee: kotlin.Boolean? = null,

    @Json(name = "withholdTax")
    val withholdTax: kotlin.Boolean? = null,

    @Json(name = "writtenoff")
    val writtenoff: kotlin.Boolean? = null

) {

    /**
     * 
     *
     * Values: CREDIT,DEBIT
     */
    @JsonClass(generateAdapter = false)
    enum class EntryType(val value: kotlin.String) {
        @Json(name = "CREDIT") CREDIT("CREDIT"),
        @Json(name = "DEBIT") DEBIT("DEBIT");
    }
    /**
     * 
     *
     * Values: INVALID,DEPOSIT,WITHDRAWAL,INTEREST_POSTING,WITHDRAWAL_FEE,ANNUAL_FEE,WAIVE_CHARGES,PAY_CHARGE,DIVIDEND_PAYOUT,INITIATE_TRANSFER,APPROVE_TRANSFER,WITHDRAW_TRANSFER,REJECT_TRANSFER,WRITTEN_OFF,OVERDRAFT_INTEREST,WITHHOLD_TAX,ESCHEAT,AMOUNT_HOLD,AMOUNT_RELEASE
     */
    @JsonClass(generateAdapter = false)
    enum class TransactionTypeEnum(val value: kotlin.String) {
        @Json(name = "INVALID") INVALID("INVALID"),
        @Json(name = "DEPOSIT") DEPOSIT("DEPOSIT"),
        @Json(name = "WITHDRAWAL") WITHDRAWAL("WITHDRAWAL"),
        @Json(name = "INTEREST_POSTING") INTEREST_POSTING("INTEREST_POSTING"),
        @Json(name = "WITHDRAWAL_FEE") WITHDRAWAL_FEE("WITHDRAWAL_FEE"),
        @Json(name = "ANNUAL_FEE") ANNUAL_FEE("ANNUAL_FEE"),
        @Json(name = "WAIVE_CHARGES") WAIVE_CHARGES("WAIVE_CHARGES"),
        @Json(name = "PAY_CHARGE") PAY_CHARGE("PAY_CHARGE"),
        @Json(name = "DIVIDEND_PAYOUT") DIVIDEND_PAYOUT("DIVIDEND_PAYOUT"),
        @Json(name = "INITIATE_TRANSFER") INITIATE_TRANSFER("INITIATE_TRANSFER"),
        @Json(name = "APPROVE_TRANSFER") APPROVE_TRANSFER("APPROVE_TRANSFER"),
        @Json(name = "WITHDRAW_TRANSFER") WITHDRAW_TRANSFER("WITHDRAW_TRANSFER"),
        @Json(name = "REJECT_TRANSFER") REJECT_TRANSFER("REJECT_TRANSFER"),
        @Json(name = "WRITTEN_OFF") WRITTEN_OFF("WRITTEN_OFF"),
        @Json(name = "OVERDRAFT_INTEREST") OVERDRAFT_INTEREST("OVERDRAFT_INTEREST"),
        @Json(name = "WITHHOLD_TAX") WITHHOLD_TAX("WITHHOLD_TAX"),
        @Json(name = "ESCHEAT") ESCHEAT("ESCHEAT"),
        @Json(name = "AMOUNT_HOLD") AMOUNT_HOLD("AMOUNT_HOLD"),
        @Json(name = "AMOUNT_RELEASE") AMOUNT_RELEASE("AMOUNT_RELEASE");
    }

}

